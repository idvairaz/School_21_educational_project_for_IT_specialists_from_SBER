#ifndef _TYPE_H
#define _TYPE_H
#include <stdbool.h>

/**
 * @enum State_mashin
 * @brief Перечисление, представляющее возможные состояния игры Тетрис.
 *        Каждое состояние определяет конкретные действия  и логику, которые будут 
 * применяться в игре в данный момент времени. Описание состояний  и все переходы 
 * находится в папке ../../misc/images/TetrisStateMachineDiagram.drawio.png
 */
typedef enum {
  START,
  SPAWN,
  PAUSE,
  MOVING,
  ATTACHING,
  GAMEOVER,
  TERMINATE
} State_mashin;


/**
 * @enum UserAction_t
 * @brief Перечисление, представляющее пользовательское действие влияющее на  
 *        изменеие State_mashin
 * */
typedef enum {
  Start,    /**< Начало игры; инициирует старт процесса. */
  Pause,    /**< Пауза; ставит игру на паузу и ожидает дальнейших действий пользователя. */
  Terminate,/**< Завершение игры; закрывает игру и завершает процесс. */
  Left,     /**< Перемещение фигуры влево; применяет сдвиг влево. */
  Right,    /**< Перемещение фигуры вправо; применяет сдвиг вправо. */
  Up,       /**< Элемент - заглушка, не выполняет ни какого действия. */
  Down,     /**< Перемещение фигуры вниз; применяет ускоренный сдвиг вниз. */
  Action,   /**< Вращение фигуры; применяет вращение если предусмотрено типом фигуры. */
} UserAction_t;


/**
 * @struct GameInfo_t
 * @brief Структура, представляющая информацию об игре.
 * 
 * Эта структура хранит данные, необходимые для управления состоянием игры,
 * включая игровое поле, очки и параметры игры.
 */
typedef struct {
    int **field;      /**< Указатель на двумерный массив, представляющий текущее игровое поле. */
    int **next;       /**< Указатель на двумерный массив, представляющий следующую фигуру в игре. */
    int score;        /**< Текущий счет игрока. */
    int high_score;   /**< Рекордный счет, сохраненный игроком. */
    int level;        /**< Уровень сложности игры. */
    int speed;        /**< Скорость игры, влияющая на частоту обновления состояния. */
    int pause;        /**< Флаг паузы; 1 - игра на паузе, 0 - игра продолжается. */
} GameInfo_t;

/**
 * @struct AllGameInfo_t
 * @brief Структура, представляющая полную информацию об игре.
 */
typedef struct {
    int **field;              /**< Указатель на двумерный массив, представляющий текущее игровое поле. */
    int **next;               /**< Указатель на двумерный массив, представляющий следующую фигуру в игре. */
    int **current_figure;     /**< Указатель на текущую фигуру, активную в игре. */
    int next_figure_type;     /**< Тип следующей фигуры, которую ожидает игрок. */
    int current_figure_type;  /**< Тип текущей фигуры, активной в игре. */
    int y_pos;                /**< Текущая вертикальная позиция активной фигуры. */
    int x_pos;                /**< Текущая горизонтальная позиция активной фигуры. */
    UserAction_t action;      /**< Действие пользователя. */
    int score;                /**< Текущий счет игрока. */
    int high_score;           /**< Рекордный счет, сохраненный игроком. */
    int level;                /**< Уровень сложности игры. */
    int speed;                /**< Скорость игры, влияющая на частоту обновления состояния. */
    int pause;                /**< Флаг паузы; 1 - игра на паузе, 0 - игра продолжается. */
    int ydec_skip_counter;    /**< Счетчик для пропуска строк (используется при опускании фигуры и скорости игры). */
    bool hold;                /**< Флаг, указывающий, удерживается ли текущее действие игрока */
    State_mashin state;       /**< Текущее состояние игры. */
} AllGameInfo_t;


/**
 * @brief Структура для представления фигуры в игре.
 *
 * Эта структура хранит информацию о фигуре, включая количество вращений,
 * количество вариантов и сами варианты фигуры. 
 */
struct _figure {

  int num_rotates;       /**<Количество вращений фигуры.*/
  int num_variants;     /**<Количество вариантов фигуры.*/

  int variants[4][16];  /**<Двумерный массив, где каждая строка представляет один из вариантов
                         * фигуры. Каждый вариант имеет размер 4x16. Это значит, что все варианты
                         * фигуры могут быть представлены в виде 4 строк, каждая из которых
                         * содержит 16 целых значений. */
};

#endif